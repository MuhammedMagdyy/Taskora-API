generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uuid         String   @id @default(uuid())
  email        String   @unique
  password     String?
  name         String?
  picture      String?
  provider     Provider @default(LOCAL)
  providerId   String?  @map("provider_id")
  isVerified   Boolean  @default(false) @map("is_verified")
  refreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  projects Project[]
  tasks    Task[]
  tags     Tag[]

  @@index([provider, providerId])
  @@map("users")
}

model Project {
  uuid        String    @id @default(uuid())
  name        String
  description String?
  dueDate     DateTime? @map("due_date") @db.Date
  color       String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  statusUuid String @map("status_uuid")
  status     Status @relation(fields: [statusUuid], references: [uuid])

  tasks Task[]

  tagUuid String? @map("tag_uuid")
  tag     Tag?    @relation(fields: [tagUuid], references: [uuid])

  userUuid String @map("user_uuid")
  user     User   @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("projects")
}

model Task {
  uuid        String    @id @default(uuid())
  name        String
  description String?
  dueDate     DateTime? @map("due_date") @db.Date
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  projectUuid String  @map("project_uuid")
  project     Project @relation(fields: [projectUuid], references: [uuid], onDelete: Cascade)

  tagUuid String? @map("tag_uuid")
  tag     Tag?    @relation(fields: [tagUuid], references: [uuid])

  statusUuid String @map("status_uuid")
  status     Status @relation(fields: [statusUuid], references: [uuid])

  userUuid String @map("user_uuid")
  user     User   @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("tasks")
}

model Tag {
  uuid      String   @id @default(uuid())
  name      String
  color     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tasks    Task[]
  Project  Project[]
  userUuid String    @map("user_uuid")
  user     User      @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("tags")
}

model Status {
  uuid      String   @id @default(uuid())
  name      String
  color     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project Project[]
  task    Task[]

  @@map("statuses")
}

enum Provider {
  LOCAL
  GOOGLE
  GITHUB
}
